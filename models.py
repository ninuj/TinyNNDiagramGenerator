from pydantic import BaseModel, Field, model_validator # Used to define and validate request body schema
from typing import List

# Input model for generating a neural network diagram
class DiagramInput(BaseModel):
    # `layer_sizes` is a list of integers where each element represents the number
    # of nodes in a specific layer of the neural network.
    layer_sizes: List[int] = Field(
        ...,  # Ellipsis means this field is required (no default value)
        title="Layer Sizes",  # Title for use in autogenerated docs (e.g. Swagger)
        description="Number of nodes in each layer. Example: [4, 5, 8, 3]"
    )

    # `colors` is a list of strings, each string representing a color assigned
    # to the corresponding layer in the neural network.
    colors: List[str] = Field(
        ...,  # Required field
        title="Colors",
        description="List of colors for each layer. Should match the number of layers."
    )

    # `bias_color` is a single string that specifies the color to be used
    # for all bias nodes across the network.
    bias_color: str = Field(
        ...,  # Required field
        title="Bias Color",
        description="Color to use for the bias nodes."
    )

    # Custom validator that runs *after* all fields are initialized.
    # Ensures that the number of colors matches the number of layers.
    @model_validator(mode="after")
    def validate_colors_match_layers(self):
        if len(self.layer_sizes) != len(self.colors):
            raise ValueError("The number of colors must match the number of layers.")
        return self  # Return the validated instance

    # Configuration class for extra behavior like examples in OpenAPI schema
    class Config:
        json_schema_extra = {
            "example": {  # Example shown in Swagger or other UIs
                "layer_sizes": [4, 5, 8, 3],
                "colors": ["red", "blue", "green", "purple"],
                "bias_color": "gray"
            }
        }


# Output model returned after diagram generation
class DiagramOutput(BaseModel):
    # `svg` is a string that holds the generated SVG markup for the diagram
    svg: str = Field(
        ...,  # Required field
        title="SVG Output",
        description="The generated SVG as a string."
    )

    # `node_count` gives the total number of nodes in all layers (excluding bias nodes)
    node_count: int = Field(
        ...,  # Required field
        title="Total Nodes",
        description="Total number of nodes in all layers (excluding bias)."
    )

    # `layer_count` gives the number of layers (length of layer_sizes list)
    layer_count: int = Field(
        ...,  # Required field
        title="Total Layers",
        description="Total number of layers."
    )

    # Configuration to show example output in the API documentation
    class Config:
        json_schema_extra = {
            "example": {
                "svg": "<svg width='500' height='300'>...</svg>",
                "node_count": 20,
                "layer_count": 4
            }
        }
